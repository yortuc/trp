{"version":3,"sources":["components/Topics.js","App.js","serviceWorker.js","index.js"],"names":["Topics","props","react_default","a","createElement","id","topics","map","topic","href","title","App","className","components_Topics","Boolean","window","location","hostname","match","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","features","filter","feature","console","log","concat","join","e","error","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+JAeeA,MAbf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACJH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UACEH,EAAMK,OAAOC,IAAI,SAACC,GAAD,OACfN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,sBAAuBD,EAAME,aCGtCC,MARf,SAAaV,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAACS,EAAD,CAAQP,OAASL,EAAMK,WCMTQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kFCMNC,gBAXuB,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,wCAMX,IACI,IAAIC,EAAMR,QACNS,EAAW,CAAC,OAAQ,WAAY,YAAa,YAAa,WAAWC,OAAO,SAAAC,GAAO,MAA4B,oBAAjBH,EAAIG,KACtGC,QAAQC,IAAR,4BAAAC,OAAwCL,EAASM,KAAK,QACxD,MAAOC,GACLJ,QAAQK,MAAMD,GACdJ,QAAQC,IAAI,sDAGhBK,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,CAAKjC,OAAQ,CAAC,CAACI,MAAO,cAAiB8B,SAASC,eAAe,SD8FzE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f45dff86.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Topics(props) {\n  return (\n    <div id=\"topics\">\n        <h1>konular</h1>\n        <ul>\n        { props.topics.map((topic) => \n            <li><a href=\"/t/{ topic.title }\">{ topic.title }</a></li>\n        )}\n        </ul>\n    </div>\n  );\n}\n\nexport default Topics;\n","import React from 'react';\nimport Topics from './components/Topics';\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <Topics topics={ props.topics } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport * as firebase from \"firebase/app\";\n\n// Add the Firebase products that you want to use\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCVgW5rXXbR3gMxX4e6b0Gow2KK4M1ug7Y\",\n    authDomain: \"ratepi-11ba3.firebaseapp.com\",\n    databaseURL: \"https://ratepi-11ba3.firebaseio.com\",\n    projectId: \"ratepi-11ba3\",\n    storageBucket: \"ratepi-11ba3.appspot.com\",\n    messagingSenderId: \"820070006558\",\n    appId: \"1:820070006558:web:dd75896ed98c11e1\"\n  };\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\ntry {\n    let app = firebase.app();\n    let features = ['auth', 'database', 'firestore', 'messaging', 'storage'].filter(feature => typeof app[feature] === 'function');\n    console.log(`Firebase SDK loaded with ${features.join(', ')}`);\n} catch (e) {\n    console.error(e);\n    console.log('Error loading the Firebase SDK, check the console.');\n}\n\nReactDOM.render(<App topics={[{title: \"deneme1\"}]} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}